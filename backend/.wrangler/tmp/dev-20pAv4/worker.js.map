{
  "version": 3,
  "sources": ["../bundle-HBPMhB/strip-cf-connecting-ip-header.js", "../../../worker.js", "../../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-HBPMhB/middleware-insertion-facade.js", "../../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/common.ts", "../bundle-HBPMhB/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\nrk82\\Downloads\\deepsight_osint_pro_advanced\\deepsight_v2_adv\\backend\\.wrangler\\tmp\\dev-20pAv4",
  "sourcesContent": ["function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// Minimal Cloudflare Worker for DeepSight API\n// - Binds D1 as `DB` via wrangler.toml (auto-injected by deploy scripts)\n// - Optionally binds R2 bucket as `R2` for object storage\n// - Provides health check, images listing, uploads, and static reads\n\n/**\n * @typedef {Object} Env\n * @property {D1Database} DB\n * @property {R2Bucket} [R2]\n */\n\nconst cors = {\n  'access-control-allow-origin': '*',\n  'access-control-allow-methods': 'GET,POST,PUT,DELETE,OPTIONS',\n  'access-control-allow-headers': 'content-type, authorization',\n};\n\nconst json = (data, init = {}) =>\n  new Response(JSON.stringify(data), {\n    ...init,\n    headers: { 'content-type': 'application/json; charset=utf-8', ...cors, ...(init.headers || {}) },\n  });\n\nconst text = (body, init = {}) => new Response(body, { ...init, headers: { ...cors, ...(init.headers || {}) } });\n\nconst notFound = () => json({ error: 'not_found' }, { status: 404 });\nconst badRequest = (msg) => json({ error: 'bad_request', message: msg }, { status: 400 });\n\nasync function handleOptions(request) {\n  if (request.headers.get('origin') !== null && request.headers.get('access-control-request-method') !== null) {\n    return new Response(null, { headers: cors });\n  }\n  return new Response(null, { headers: cors });\n}\n\nfunction safeKey(input) {\n  let k = String(input || '').trim();\n  while (k.startsWith('/')) k = k.slice(1);\n  if (k.includes('..')) return null;\n  if (!/^[a-zA-Z0-9_\\-\\/\\.]+$/.test(k)) return null;\n  return k;\n}\n\nfunction authFailed() {\n  return json({ error: 'unauthorized' }, { status: 401, headers: { 'www-authenticate': 'Bearer' } });\n}\n\n// Require admin for non-GET when ADMIN_TOKEN is configured; allow if unset (dev)\nfunction requireAdmin(request, env) {\n  const token = env.ADMIN_TOKEN;\n  if (!token) return true;\n  const hdr = request.headers.get('authorization') || '';\n  const m = /^Bearer\\s+(.+)$/.exec(hdr);\n  if (!m) return false;\n  return m[1] === token;\n}\n\n/** @param {Request} request @param {Env} env */\nasync function router(request, env) {\n  const url = new URL(request.url);\n  const { pathname, searchParams } = url;\n\n  if (request.method === 'OPTIONS') return handleOptions(request);\n\n  if (pathname === '/api/health') {\n    return json({ ok: true, ts: Date.now() });\n  }\n\n  if (pathname === '/api/images/list') {\n    const limit = Math.min(parseInt(searchParams.get('limit') || '24', 10) || 24, 200);\n    const page = Math.max(parseInt(searchParams.get('page') || '0', 10) || 0, 0);\n    const offset = page * limit;\n    try {\n      const countRes = await env.DB.prepare('SELECT COUNT(*) as c FROM images').all();\n      const total = countRes?.results?.[0]?.c || 0;\n      const stmt = env.DB.prepare(\n        'SELECT id, url, created_at, json_extract(metadata, \"$.r2_key\") AS r2_key, json_extract(metadata, \"$.text\") AS text FROM images ORDER BY datetime(created_at) DESC LIMIT ? OFFSET ?'\n      );\n      const result = await stmt.bind(limit, offset).all();\n      const rows = Array.isArray(result?.results) ? result.results : [];\n      const next = offset + limit < total ? page + 1 : null;\n      return json({ items: rows, next_page: next, total });\n    } catch (err) {\n      return json({ items: [], next_page: null, total: 0, note: 'images table missing or query failed' });\n    }\n  }\n\n  if (pathname === '/api/images') {\n    if (request.method !== 'POST') return badRequest('method_not_allowed');\n    if (!requireAdmin(request, env)) return authFailed();\n    try {\n      const body = await request.json();\n      const id = body?.id || crypto.randomUUID();\n      const urlStr = body?.url || '';\n      const title = body?.text || body?.title || null;\n      const metadata = JSON.stringify({\n        r2_key: body?.r2_key,\n        bytes: body?.bytes,\n        text: body?.text,\n      });\n      await env.DB.prepare('INSERT OR REPLACE INTO images (id, url, created_at, title, metadata) VALUES (?, ?, CURRENT_TIMESTAMP, ?, ?)')\n        .bind(id, urlStr, title, metadata)\n        .run();\n      return json({ ok: true, id });\n    } catch (e) {\n      return json({ ok: false, error: 'insert_failed' }, { status: 500 });\n    }\n  }\n\n  if (pathname === '/api/search') {\n    const kind = (searchParams.get('kind') || 'text').toLowerCase();\n    if (kind === 'text') {\n      const q = (searchParams.get('q') || '').trim();\n      const k = Math.min(parseInt(searchParams.get('k') || '24', 10) || 24, 200);\n      if (!q) return json({ matches: [] });\n      try {\n        const stmt = env.DB.prepare(\n          'SELECT id, url, created_at, json_extract(metadata, \"$.r2_key\") AS r2_key, json_extract(metadata, \"$.text\") AS text FROM images WHERE url LIKE ? OR json_extract(metadata, \"$.text\") LIKE ? ORDER BY datetime(created_at) DESC LIMIT ?'\n        );\n        const like = `%${q}%`;\n        const res = await stmt.bind(like, like, k).all();\n        const rows = res?.results || [];\n        // Shape similar to frontend expectations (array of matches)\n        return json({ matches: rows });\n      } catch (e) {\n        return json({ matches: [] });\n      }\n    }\n    if (kind === 'phash') {\n      // Not implemented; return empty for preview\n      return json({ matches: [] });\n    }\n    return json({ matches: [] });\n  }\n\n  if (pathname === '/api/stats') {\n    try {\n      const r = await env.DB.prepare('SELECT COUNT(*) as images FROM images').all();\n      const images = r?.results?.[0]?.images || 0;\n      return json({ images });\n    } catch {\n      return json({ images: 0 });\n    }\n  }\n\n  if (pathname === '/api/crawl') {\n    if (request.method !== 'POST') return badRequest('method_not_allowed');\n    if (!requireAdmin(request, env)) return authFailed();\n    // Preview stub: accept payload and respond queued=true\n    return json({ queued: true });\n  }\n\n  if (pathname === '/api/images/upload-url') {\n    if (request.method !== 'POST') return badRequest('method_not_allowed');\n    if (!requireAdmin(request, env)) return authFailed();\n    try {\n      const { key } = await request.json();\n      const k = safeKey(key);\n      if (!k) return badRequest('invalid key');\n      const origin = url.origin;\n      // Direct Worker-managed endpoints (no presign):\n      const put = `${origin}/api/r2/object/${encodeURIComponent(k)}`;\n      const get = `${origin}/r2/${encodeURIComponent(k)}`;\n      return json({ put, get });\n    } catch (e) {\n      return badRequest('invalid_json');\n    }\n  }\n\n  if (pathname.startsWith('/api/r2/object/')) {\n    if (request.method === 'OPTIONS') return handleOptions(request);\n    if (!env.R2) return json({ error: 'r2_not_configured' }, { status: 501 });\n    if (!requireAdmin(request, env)) return authFailed();\n    const key = decodeURIComponent(pathname.replace('/api/r2/object/', ''));\n    const k = safeKey(key);\n    if (!k) return badRequest('invalid key');\n    if (request.method === 'PUT') {\n      const ct = request.headers.get('content-type') || undefined;\n      await env.R2.put(k, request.body, { httpMetadata: { contentType: ct } });\n      return json({ ok: true, key: k });\n    }\n    if (request.method === 'DELETE') {\n      await env.R2.delete(k);\n      return json({ ok: true, key: k });\n    }\n    return badRequest('method_not_allowed');\n  }\n\n  if (pathname.startsWith('/r2/')) {\n    if (!env.R2) return json({ error: 'r2_not_configured' }, { status: 501 });\n    const key = decodeURIComponent(pathname.replace('/r2/', ''));\n    const k = safeKey(key);\n    if (!k) return badRequest('invalid key');\n    const obj = await env.R2.get(k);\n    if (!obj) return notFound();\n    const headers = { ...cors };\n    const ct = obj.httpMetadata?.contentType || 'application/octet-stream';\n    headers['content-type'] = ct;\n    headers['cache-control'] = 'public, max-age=3600';\n    return new Response(obj.body, { headers });\n  }\n\n  if (pathname.startsWith('/api/images/')) {\n    if (request.method !== 'DELETE') return badRequest('method_not_allowed');\n    if (!requireAdmin(request, env)) return authFailed();\n    const id = decodeURIComponent(pathname.replace('/api/images/', ''));\n    if (!id) return badRequest('id required');\n    try {\n      const rowRes = await env.DB.prepare(\n        'SELECT id, json_extract(metadata, \"$.r2_key\") as r2_key FROM images WHERE id = ?'\n      ).bind(id).all();\n      const row = rowRes?.results?.[0];\n      if (row?.r2_key && env.R2) {\n        const rk = safeKey(row.r2_key);\n        if (rk) await env.R2.delete(rk);\n      }\n      await env.DB.prepare('DELETE FROM images WHERE id = ?').bind(id).run();\n      return json({ ok: true, id });\n    } catch (e) {\n      return json({ ok: false, error: 'delete_failed' }, { status: 500 });\n    }\n  }\n\n  return notFound();\n}\n\nexport default {\n  /** @param {Request} request @param {Env} env */\n  fetch: (request, env) => router(request, env),\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\nrk82\\\\Downloads\\\\deepsight_osint_pro_advanced\\\\deepsight_v2_adv\\\\backend\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\nrk82\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\nrk82\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\nrk82\\\\Downloads\\\\deepsight_osint_pro_advanced\\\\deepsight_v2_adv\\\\backend\\\\worker.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\nrk82\\\\Downloads\\\\deepsight_osint_pro_advanced\\\\deepsight_v2_adv\\\\backend\\\\.wrangler\\\\tmp\\\\bundle-HBPMhB\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\nrk82\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\nrk82\\\\Downloads\\\\deepsight_osint_pro_advanced\\\\deepsight_v2_adv\\\\backend\\\\.wrangler\\\\tmp\\\\bundle-HBPMhB\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\nrk82\\\\Downloads\\\\deepsight_osint_pro_advanced\\\\deepsight_v2_adv\\\\backend\\\\.wrangler\\\\tmp\\\\bundle-HBPMhB\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
